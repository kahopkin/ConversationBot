{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"compression\"?f791","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/conversationalBot/ConversationalBot.ts?da55","webpack:///external \"botbuilder\"?fa14","webpack:///./src/app/conversationalBot/dialogs/HelpDialog.ts?4816","webpack:///./src/app/conversationalBot/dialogs/WelcomeDialog.ts?22b3","webpack:///external \"util\"?be0b"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","express","Express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","TextEncoder","ConversationalBot","TeamsActivityHandler","conversationState","super","this","dialogState","createProperty","dialogs","DialogSet","add","onMessage","context","activity","type","ActivityTypes","Message","text","TurnContext","removeRecipientMention","toLowerCase","startsWith","conversation","conversationType","handleMessageMentionMeOneOnOne","handleMessageMentionMeChannelConversation","sendActivity","cardAction","count","card","CardFactory","adaptiveCard","attachments","dc","createContext","beginDialog","updateCardActivity","deleteCardActivity","saveChanges","onConversationUpdate","membersAdded","length","idx","id","recipient","welcomeCard","onMessageReaction","reactionsAdded","forEach","reaction","mention","mentioned","from","encode","replyActivity","MessageFactory","entities","followupActivity","sendActivities","updateActivity","replyToId","deleteActivity","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","HelpDialog","Dialog","dialogId","options","endDialog","WelcomeCard"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\r\nimport * as http from \"http\";\r\nimport * as path from \"path\";\r\nimport * as morgan from \"morgan\";\r\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\r\nimport * as debug from \"debug\";\r\nimport * as compression from \"compression\";\r\n\r\n\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\nlog(`Initializing Microsoft Teams Express hosted App...`);\r\n\r\n// Initialize dotenv, to use .env file settings if existing\r\n// tslint:disable-next-line:no-var-requires\r\nrequire(\"dotenv\").config();\r\n\r\n\r\n\r\n// The import of components has to be done AFTER the dotenv config\r\nimport * as allComponents from \"./TeamsAppsComponents\";\r\n\r\n// Create the Express webserver\r\nconst express = Express();\r\nconst port = process.env.port || process.env.PORT || 3007;\r\n\r\n// Inject the raw request body onto the request object\r\nexpress.use(Express.json({\r\n    verify: (req, res, buf: Buffer, encoding: string): void => {\r\n        (req as any).rawBody = buf.toString();\r\n    }\r\n}));\r\nexpress.use(Express.urlencoded({ extended: true }));\r\n\r\n// Express configuration\r\nexpress.set(\"views\", path.join(__dirname, \"/\"));\r\n\r\n// Add simple logging\r\nexpress.use(morgan(\"tiny\"));\r\n\r\n// Add compression - uncomment to remove compression\r\nexpress.use(compression());\r\n\r\n// Add /scripts and /assets as static folders\r\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\r\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\r\n\r\n// routing for bots, connectors and incoming web hooks - based on the decorators\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(MsTeamsApiRouter(allComponents));\r\n\r\n// routing for pages for tabs and connector configuration\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(MsTeamsPageRouter({\r\n    root: path.join(__dirname, \"web/\"),\r\n    components: allComponents\r\n}));\r\n\r\n// Set default web page\r\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\r\n    index: \"index.html\"\r\n}));\r\n\r\n// Set the port\r\nexpress.set(\"port\", port);\r\n\r\n// Start the webserver\r\nhttp.createServer(express).listen(port, () => {\r\n    log(`Server running on ${port}`);\r\n});\r\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"compression\");","module.exports = require(\"dotenv\");","// Components will be added here\r\nexport const nonce = {}; // Do not remove!\r\n// Automatically added for the conversationalBot bot\r\nexport * from \"./conversationalBot/ConversationalBot\";\r\n","import { BotDeclaration, MessageExtensionDeclaration, PreventIframe } from \"express-msteams-host\";\r\nimport * as debug from \"debug\";\r\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\r\nimport {\r\n  StatePropertyAccessor,\r\n  CardFactory,\r\n  TurnContext,\r\n  MemoryStorage,\r\n  ConversationState,\r\n  ActivityTypes,\r\n  TeamsActivityHandler,\r\n  MessageFactory,\r\n} from 'botbuilder';\r\nimport HelpDialog from \"./dialogs/HelpDialog\";\r\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\r\n\r\nimport * as Util from \"util\";\r\nconst TextEncoder = Util.TextEncoder;\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\n/**\r\n * Implementation for Conversational Bot\r\n */\r\n@BotDeclaration(\r\n  \"/api/messages\",\r\n  new MemoryStorage(),\r\n  process.env.MICROSOFT_APP_ID,\r\n  process.env.MICROSOFT_APP_PASSWORD)\r\n\r\nexport class ConversationalBot extends TeamsActivityHandler {\r\n  private readonly conversationState: ConversationState;\r\n  private readonly dialogs: DialogSet;\r\n  private dialogState: StatePropertyAccessor<DialogState>;\r\n\r\n  /**\r\n   * The constructor\r\n   * @param conversationState\r\n   */\r\n  public constructor(conversationState: ConversationState) {\r\n    super();\r\n\r\n    this.conversationState = conversationState;\r\n    this.dialogState = conversationState.createProperty(\"dialogState\");\r\n    this.dialogs = new DialogSet(this.dialogState);\r\n    this.dialogs.add(new HelpDialog(\"help\"));\r\n\r\n    // Set up the Activity processing\r\n\r\n    this.onMessage(async (context: TurnContext): Promise<void> => {\r\n      // TODO: add your own bot logic in here\r\n      switch (context.activity.type) {\r\n        case ActivityTypes.Message:\r\n          // if a value property exists = adaptive card submit action\r\n          if (context.activity.value) {\r\n            switch (context.activity.value.cardAction) {\r\n              case \"update\":\r\n                await this.updateCardActivity(context);\r\n                break;\r\n              case \"delete\":\r\n                await this.deleteCardActivity(context);\r\n                break;\r\n            }\r\n          } else {\r\n            let text = TurnContext.removeRecipientMention(context.activity);\r\n            text = text.toLowerCase();\r\n            if (text.startsWith(\"mentionme\")) {\r\n              if (context.activity.conversation.conversationType == \"personal\") {\r\n                await this.handleMessageMentionMeOneOnOne(context);\r\n              } else {\r\n                await this.handleMessageMentionMeChannelConversation(context);\r\n              }\r\n              return;\r\n            } else if (text.startsWith(\"hello\")) {\r\n              await context.sendActivity(\"Oh, hello to you as well!\");\r\n              return;\r\n            } else if (text.startsWith(\"help\")) {\r\n              const dc = await this.dialogs.createContext(context);\r\n              await dc.beginDialog(\"help\");\r\n            } else {\r\n              const value = { cardAction: \"update\", count: 0 };\r\n              const card = CardFactory.adaptiveCard({\r\n                \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\r\n                \"type\": \"AdaptiveCard\",\r\n                \"version\": \"1.0\",\r\n                \"body\": [\r\n                  {\r\n                    \"type\": \"Container\",\r\n                    \"items\": [\r\n                      {\r\n                        \"type\": \"TextBlock\",\r\n                        \"text\": \"Adaptive card response\",\r\n                        \"weight\": \"bolder\",\r\n                        \"size\": \"large\"\r\n                      }\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"type\": \"Container\",\r\n                    \"items\": [\r\n                      {\r\n                        \"type\": \"TextBlock\",\r\n                        \"text\": \"Demonstrates how to respond with a card, update the card & ultimately delete the response.\",\r\n                        \"wrap\": true\r\n                      }\r\n                    ]\r\n                  }\r\n                ],\r\n                \"actions\": [\r\n                  {\r\n                    \"type\": \"Action.Submit\",\r\n                    \"title\": \"Update card\",\r\n                    \"data\": value\r\n                  }\r\n                ]\r\n              });\r\n              await context.sendActivity({ attachments: [card] });\r\n              return;\r\n            }\r\n            break;\r\n          }\r\n\r\n        default:\r\n          break;\r\n      }\r\n      // Save state changes\r\n      return this.conversationState.saveChanges(context);\r\n    });\r\n\r\n    this.onConversationUpdate(async (context: TurnContext): Promise<void> => {\r\n      if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\r\n        for (const idx in context.activity.membersAdded) {\r\n          if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\r\n            const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\r\n            await context.sendActivity({ attachments: [welcomeCard] });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    this.onMessageReaction(async (context: TurnContext): Promise<void> => {\r\n      if (context.activity.reactionsAdded) {\r\n        context.activity.reactionsAdded.forEach(async (reaction) => {\r\n          if (reaction.type === \"like\") {\r\n            await context.sendActivity(\"Thank you!\");\r\n          }\r\n        });\r\n      }\r\n    });;\r\n  }\r\n\r\n  private async handleMessageMentionMeOneOnOne(context: TurnContext): Promise<void> {\r\n    const mention = {\r\n      mentioned: context.activity.from,\r\n      text: `<at>${new TextEncoder().encode(context.activity.from.name)}</at>`,\r\n      type: \"mention\"\r\n    };\r\n\r\n    const replyActivity = MessageFactory.text(`Hi ${mention.text} from a 1:1 chat.`);\r\n    replyActivity.entities = [mention];\r\n    await context.sendActivity(replyActivity);\r\n  }\r\n\r\n  private async handleMessageMentionMeChannelConversation(context: TurnContext): Promise<void> {\r\n    const mention = {\r\n      mentioned: context.activity.from,\r\n      text: `<at>${new TextEncoder().encode(context.activity.from.name)}</at>`,\r\n      type: \"mention\"\r\n    };\r\n\r\n    const replyActivity = MessageFactory.text(`Hi ${mention.text}!`);\r\n    replyActivity.entities = [mention];\r\n    const followupActivity = MessageFactory.text(`*We are in a channel conversation*`);\r\n    await context.sendActivities([replyActivity, followupActivity]);\r\n  }\r\n\r\n  private async updateCardActivity(context): Promise<void> {\r\n    const value = {\r\n      cardAction: \"update\",\r\n      count: context.activity.value.count + 1\r\n    };\r\n    const card = CardFactory.adaptiveCard({\r\n      \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\r\n      \"type\": \"AdaptiveCard\",\r\n      \"version\": \"1.0\",\r\n      \"body\": [\r\n        {\r\n          \"type\": \"Container\",\r\n          \"items\": [\r\n            {\r\n              \"type\": \"TextBlock\",\r\n              \"text\": \"Adaptive card response\",\r\n              \"weight\": \"bolder\",\r\n              \"size\": \"large\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"Container\",\r\n          \"items\": [\r\n            {\r\n              \"type\": \"TextBlock\",\r\n              \"text\": `Updated count: ${value.count}`,\r\n              \"wrap\": true\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      \"actions\": [\r\n        {\r\n          \"type\": \"Action.Submit\",\r\n          \"title\": \"Update card\",\r\n          \"data\": value\r\n        },\r\n        {\r\n          \"type\": \"Action.Submit\",\r\n          \"title\": \"Delete card\",\r\n          \"data\": { cardAction: \"delete\" }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await context.updateActivity({ attachments: [card], id: context.activity.replyToId, type: 'message' });\r\n  }\r\n\r\n  private async deleteCardActivity(context): Promise<void> {\r\n    await context.deleteActivity(context.activity.replyToId);\r\n  }\r\n\r\n}\r\n","module.exports = require(\"botbuilder\");","import { Dialog, DialogContext, DialogTurnResult } from \"botbuilder-dialogs\";\r\n\r\nexport default class HelpDialog extends Dialog {\r\n    constructor(dialogId: string) {\r\n        super(dialogId);\r\n    }\r\n\r\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\r\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\r\n        return await context.endDialog();\r\n    }\r\n}\r\n","const WelcomeCard = require(\"./WelcomeCard.json\");\r\n\r\nexport default WelcomeCard;\r\n","module.exports = require(\"util\");"],"sourceRoot":""}